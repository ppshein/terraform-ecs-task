name: CD - Deploy to Environments

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - blue-green
          - canary

env:
  AWS_REGION: eu-west-1

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy-core:
    name: Deploy Core Infrastructure
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.x

      - name: Deploy Core Infrastructure
        run: |
          cd infrastructure/core
          terraform init -backend-config="backend/backend-${{ needs.determine-environment.outputs.environment }}.conf"
          terraform workspace select digital-sre-${{ needs.determine-environment.outputs.environment }} || terraform workspace new digital-sre-${{ needs.determine-environment.outputs.environment }}
          terraform plan -var-file="values/digital/sre/${{ needs.determine-environment.outputs.environment }}.tfvars"
          terraform apply -auto-approve -var-file="values/digital/sre/${{ needs.determine-environment.outputs.environment }}.tfvars"

  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-core]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      image_uri: ${{ steps.build.outputs.image_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and push to ECR
        id: build
        run: |
          # Set environment-specific repository name
          export ECR_REPOSITORY="sre/${{ needs.determine-environment.outputs.environment }}-nodejs-app"
          export IMAGE_TAG="${{ github.sha }}"
          
          # Run build script
          ./build.sh ${IMAGE_TAG}
          
          # Output for next jobs
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image_uri=${ECR_URI}/${ECR_REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.x

      - name: Deploy Application Infrastructure
        run: |
          ./deploy infraPlan digital sre ${{ needs.determine-environment.outputs.environment }}
          ./deploy infraApply digital sre ${{ needs.determine-environment.outputs.environment }}

      - name: Update ECS Service with New Image
        run: |
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition sre-${{ needs.determine-environment.outputs.environment }}-task \
            --query taskDefinition --output json)
          
          # Update image URI in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ needs.build-and-push.outputs.image_uri }}" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json "$NEW_TASK_DEFINITION" \
            --query taskDefinition.taskDefinitionArn --output text)
          
          # Update service
          aws ecs update-service \
            --cluster sre-${{ needs.determine-environment.outputs.environment }}-cluster \
            --service sre-${{ needs.determine-environment.outputs.environment }}-service \
            --task-definition $NEW_TASK_DEF_ARN

      - name: Wait for Deployment
        run: |
          aws ecs wait services-stable \
            --cluster sre-${{ needs.determine-environment.outputs.environment }}-cluster \
            --services sre-${{ needs.determine-environment.outputs.environment }}-service

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-application]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Load Balancer URL
        id: lb
        run: |
          LB_DNS=$(aws elbv2 describe-load-balancers \
            --names sre-${{ needs.determine-environment.outputs.environment }}-cluster-alb \
            --query 'LoadBalancers[0].DNSName' --output text)
          echo "lb_url=https://${LB_DNS}" >> $GITHUB_OUTPUT

      - name: Health Check
        run: |
          echo "Testing application health at ${{ steps.lb.outputs.lb_url }}"
          
          # Wait for ALB to be ready
          sleep 30
          
          # Test health endpoint
          for i in {1..10}; do
            if curl -k -f -s "${{ steps.lb.outputs.lb_url }}/health"; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying in 30s..."
            sleep 30
          done
          
          echo "Health check failed after 10 attempts"
          exit 1